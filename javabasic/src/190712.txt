## 코딩 스킬

### 오늘의 코드
- import : 필요한 클래스가 들어있는 새로운 패키지를 불러올 때 사용
- main : 메소드 function의 일종. class가 여러개 되더라도 프로그램 내에 단 하나만 존재해야 함



### (중요!) 프로그래밍의 순서
> 프로그래밍은 순차적으로 해야 함
1. 변수 선언
2. 입력
3. 처리(계산)
4. 출력



> ### Tip
> 변수 이름은 직관적으로, 알아듣기 쉽게 적기



### 패키지 이름 바꾸기
	패키지 오른클릭 - Refactor - Rename - 이름 바꿔 넣고 Update references 체크 - finish
- Update references : 패키지 이름을 참조하고 있는 명령어들에서 패키지 이름을 새 이름으로 갱신해줌



## Operator(연산자)
- 연산에 사용하는 기호
- Operand(항, 피연산자)의 수에 따라 단항, 이항, 다항 연산자로 나뉨
- 우선순위 : 단항 > 이항 > 삼항


### 대입 연산자(=)

	lValue = rValue

- lValue(Left Value, 왼쪽 값) : 변수가 들어감
- rValue(Right Value, 오른쪽 값) : 숫자, 식, 문자, 표현식, 변수 등


### 부호 연산자(+,-)
- 변수나 상수 값을 양수, 음수로 만들기


### 산술 연산자
- +, -, *, /, %
- % : moduler, 나머지를 구하는 연산자





#### 예제_이름과 국영수 점수를 입력받아 총점과 평균을 구하시오.

### 연산 시 주의할 점

	실수형 = 정수형 / 정수형;

- 결과값 : 정수형
- 결과값이 실수로 나오게 하려면 연산 시 실수를 넣어줘야 함
- 형변환을 시키거나 실수형(0.0)으로 표기하는 방법이 있음.



### 단항 연산자

#### 증감연산자 (+)
> 아래는 모두 같은 공식임

	i=i+1;
	i++;
	++i;


#### 증감연산자 (-)
> 위는 모두 같은 공식임

	i=i-1;
	i--;
	--i;


#### 증감연산자 위치에 따른 우선순위 차이

	A=10
	B=A++;

1. B에 A를 대입함
2. A에 1을 더함

> 반대 상황

	A=10
	B=++A;

1. A에 1을 더함
2. B에 A를 대입함



### 관계 연산자(Relational Operator)
- > < =
- True 또는 False 값을 반환함
- == : 두 값이 같으면 True, 아니면 False
- != : 두 값이 다르면 True, 아니면 False



### 논리 연산자(Logical Operator)
- && (AND) : 두 항이 모두 참일 때 참
- || (OR) : 두 항 중 하나가 참이면 참
- ! (NOT) : 단항 연산자로 참을 거짓으로, 거짓을 참으로 변경



### 복합 대입 연산자(Complex Assignment Operator)
- += : 두 항의 값을 더해서 왼쪽 항에 대입
- -=, *=, /=, %=
- <<=, >>=, >>>=
- &=, |=, ^=



### 조건 연산자(Conditional Operator)
- 조건식?결과1:결과2;
- 세 개의 항이 연산에 참여하므로 삼항연산자 임



### 비트 연산자
#### 비트 논리 연산자
- &, |, ^, ~



#### 비트 이동 연산자
- <<, >>, >>>



#### Tip
- 2진수 : 숫자 표현에 0, 1 사용
- 8진수 : 숫자 표현에 0~7 사용
- 10진수 : 0~9 사용
- 16진수 : 0~9, A~F 사용



#### 숫자 출력 시 포맷 정하기

	System.out.printf("     ", num);

%[-][0][m][.n]_
_ : d 10진수	- 왼쪽정렬, 빈 칸은 공백으로 채워서 출력
    b boolean	0 오른쪽정렬, 빈 칸은 0으로 채워서 출력
    o 8진수	m 전체 자릿수
    xX 16진수	.n 소수점이하 자릿수
    e 지수형
    f 실수형
    c 문자
    s 문자열



### 제어구문
- 순차적 실행 : 프로그램은 위에서 아래로 차례대로 실행됨.
- 선택제어 : if 제어문

	if(조건식){실행문장1;}
	else if{실행문장2;}
	else {실행문장3;}

- 반복제어 : 